{
	"nodes":[
		{"type":"file","file":"Pasted image 20230203122451.png","id":"4fe4e00b944a2588","x":-596,"y":-378,"width":604,"height":403},
		{"type":"text","text":"Электрические сигналы, Хаб.","id":"70c1f31889c175a7","x":6,"y":-37,"width":250,"height":60},
		{"type":"text","text":"Свитчи. Мак адрес, ethernet. ","id":"ea9016322e8f8f70","x":8,"y":-87,"width":248,"height":50},
		{"type":"text","text":"Маршрутизаторы, IP-адрес, ICMP (Ping) ","id":"692c289fd9c8be51","x":8,"y":-137,"width":248,"height":50},
		{"type":"text","text":"TCP/UDP, ","id":"ff5eea3424d28a60","x":8,"y":-197,"width":250,"height":60},
		{"type":"text","text":"Разрыв сессий, кодеки кодирования сигнала","id":"3e861bcc0555542d","x":8,"y":-247,"width":250,"height":50},
		{"type":"text","text":"протоколы SSH, FTP, DNS, HTTPS. HTTP, SMTP","id":"338411ec186ffbc9","x":8,"y":-346,"width":248,"height":50},
		{"type":"text","text":"JPEG, GIF","id":"aa73e99ef91c404c","x":6,"y":-297,"width":250,"height":50},
		{"type":"text","text":"**Монолит**\nТрадиционная монолитная архитектура веб-приложения состоит из трех частей - базы данных, клиентской и серверной сторон. Это означает, что внутренняя и внешняя логика, как и другие фоновые задачи, генерируются в одной кодовой базе. Чтобы изменить или обновить компонент приложения, разработчики программного обеспечения должны переписать все приложение.  \n**Микросервисы**\nЧто касается микросервисов, этот подход позволяет разработчикам создавать веб-приложение из набора небольших сервисов. Разработчики создают и развертывают каждый компонент отдельно.","id":"3f7031e3a382df03","x":-596,"y":-679,"width":602,"height":301},
		{"type":"text","text":"IP-адрес - Internet Protocol IPv4 32 бит, IPv6 128 бит. ","id":"722cdace5a16f272","x":-596,"y":25,"width":604,"height":60},
		{"type":"text","text":"NAT - Network Adress Translation - объединение устройств в локальной сети для выхода в интернет под одним внешним IP адресом","id":"05cb55d8c23a51ec","x":-596,"y":85,"width":604,"height":60},
		{"type":"text","text":"UDP - User Datagram Protocol","id":"81769df348e09d5c","x":-294,"y":145,"width":300,"height":60},
		{"type":"text","text":"TCP - Transmission Control Protocol ","id":"93515355c60dbca1","x":-596,"y":145,"width":302,"height":60},
		{"type":"text","text":"HTTPS - шифрует все данные при передачи и  делает невозможным их воспроизвдение при перехвате. Шифрование осуществляется с помощью SSL и TLS. ","id":"06f541f7d6b91310","x":-596,"y":205,"width":602,"height":105},
		{"type":"text","text":"DOS - Denial of Service - большое количество запросов с одного IPадреса\nDDOS - Destributed - множетсво адресов и множество запросов\nPhishing - нелегитимные ссылки для получения личной информации\nBackdoor - удаленное управление ПК со стороны злоумышленика\nMiner - скрыто добывает крипту за счет ресурсов взломанного ПК\nRootKit - скрывает присутствие вредоносного ПО\nBruteForce - метод полного перебора пароля\n","id":"ede0971549981e6e","x":-596,"y":310,"width":602,"height":230},
		{"type":"text","text":"HTTP запрос:\n- Cтартовая строка\n1. URL\n2. Метод запроса\n- Заголовок\n1. Информация о браузре\n2. Язык \n3. Сведения авторизации\n- Тело сообщение\n1. Данные которые мы передаем в запросе\n2. Ответ от сервера","id":"a174856d5d04b537","x":6,"y":25,"width":250,"height":484},
		{"type":"file","file":"Снимок экрана 2023-05-16 в 12.01.04.png","id":"9342c509b231b77d","x":1142,"y":-167,"width":496,"height":550},
		{"type":"file","file":"Снимок экрана 2023-05-16 в 12.04.10.png","id":"4569986706d4cd48","x":1141,"y":-746,"width":497,"height":549},
		{"type":"text","text":"Менеджеры очередей позволяет приложениям обмениваться сообщениями между собой.\nProducer - программа, которая отсылает\nBroker - очередь, буфер в памяти\nConsumer - получатель, программа, которая принимает сообщения из очереди.\n","id":"36590c658a46e137","x":6,"y":-497,"width":709,"height":151},
		{"type":"text","text":"DNS - Domain Name System - ипользуется для получения IP адреса по имени хоста. Например avito.ru\n<pre>\ndmitryslepov@MacBook-Air-C17FX76XQ6L4 ~ % dig A +short avito.ru\n146.158.52.24\n146.158.48.24\n146.158.54.24\n<pre>","id":"676bd70554f0340b","x":10,"y":-680,"width":712,"height":183},
		{"type":"text","text":"DNS кэш - это временное хранилище записей DNS-запросов, которые были ранее выполнены вашим компьютером или маршрутизатором. Когда вы пытаетесь получить доступ к веб-сайту или другому ресурсу в Интернете, ваш компьютер отправляет запрос на DNS-сервер, чтобы узнать IP-адрес, связанный с доменным именем, указанным в URL-адресе.\n\nВместо того чтобы делать новый запрос к DNS-серверу каждый раз, когда вы посещаете тот же веб-сайт или используете тот же домен, ваш компьютер может использовать DNS кэш, чтобы сохранить записи предыдущих запросов. Таким образом, при повторном запросе для того же доменного имени, DNS-клиент сначала проверит свой кэш на наличие соответствующей записи и, если таковая имеется, он будет использовать ее вместо того, чтобы делать новый запрос к DNS-серверу.\n\nDNS кэш помогает ускорить процесс доступа к веб-сайтам и другим ресурсам в Интернете, так как он позволяет избежать необходимости выполнения новых запросов к DNS-серверу каждый раз, когда вы посещаете один и тот же сайт или используете один и тот же домен. В то же время, DNS-кэш может привести к неправильным результатам DNS-запросов, если DNS-записи были изменены с момента последнего запроса и кэш не был обновлен. Поэтому DNS кэш должен периодически обновляться для того, чтобы гарантировать актуальность и достоверность информации.","id":"63b17320df2d1656","x":14,"y":-1240,"width":705,"height":560},
		{"type":"text","text":"Когда вы вводите URL (Uniform Resource Locator) в адресную строку браузера и нажимаете клавишу Enter, ваш компьютер и браузер начинают процесс поиска запрашиваемого вами ресурса в Интернете. Этот процесс состоит из нескольких этапов:\n\n1.  Разрешение доменного имени: ваш браузер отправляет запрос на DNS-сервер, чтобы узнать IP-адрес, связанный с доменным именем введенного URL.\n2.  Установление соединения: ваш браузер устанавливает соединение с сервером, используя IP-адрес, полученный на предыдущем этапе, и протокол передачи данных (обычно это HTTP или HTTPS).\n3.  Запрос ресурса: после установления соединения браузер отправляет запрос на сервер с указанием запрашиваемого ресурса (например, страницы веб-сайта).\n4.  Передача данных: сервер отправляет запрашиваемый ресурс обратно на браузер в виде HTML-страницы, изображения, видео, аудио или другого контента.  \n5.  Отображение: браузер принимает полученный контент и отображает его в окне браузера.\n","id":"fae30221dc103cfe","x":-596,"y":-1180,"width":604,"height":500},
		{"type":"text","text":"-   _однонаправленная, асинхронная репликация_, при которой один сервер является источником, а остальные - репликами. При этом, реплика тоже может быть источником. Именно эту схему репликации и рассмотрим (`CHANGE MASTER TO...`)\n-   _полусинхронная (semisynchronous) репликация_ - commit транзакции будет подтвержден, только тогда, когда хотябы одна из реплик подтвердит, что событие получено и зафиксировано/логировано.\n-   _репликация с задержкой (delayed)_ - между данными источника и репликой будет задержка, заданная администратором. Обычно используется для тестирования или для защиты от ошибок на мастере.","id":"7cede3d9db0a3a26","x":722,"y":-421,"width":424,"height":477},
		{"type":"file","file":"Pasted image 20230203132857.png","id":"bba2c7d3bc0a40d8","x":319,"y":142,"width":400,"height":289},
		{"type":"text","text":"Master-Master","id":"0b02e61af991e19c","x":315,"y":55,"width":258,"height":50},
		{"type":"file","file":"Pasted image 20230203132752.png","id":"1a9c9164ddb66c24","x":316,"y":-247,"width":399,"height":300},
		{"type":"text","text":"Master-Slave","id":"5ce433c68a7c79eb","x":315,"y":-346,"width":258,"height":50},
		{"type":"text","text":"Реляционные базы данных:\n\n-   Структура данных: Реляционные БД организованы в виде таблиц, состоящих из строк (записей) и столбцов (полей). Связи между таблицами устанавливаются с помощью ключей и внешних ключей.\n-   Модель данных: Реляционные БД основаны на реляционной модели данных, которая использует теорию множеств и предикатов для организации и обработки данных.\n-   Язык запросов: В реляционных БД используется язык структурированных запросов SQL (Structured Query Language) для создания, модификации и извлечения данных.\n-   Гибкость: Реляционные БД предоставляют гибкость в структуре данных и возможность устанавливать сложные отношения между таблицами.\n-   Транзакции: Реляционные БД обеспечивают механизмы транзакций для поддержки целостности данных и обработки согласованных изменений.\n\nНереляционные базы данных (NoSQL):\n\n-   Структура данных: Нереляционные БД используют различные структуры данных, такие как документы, ключ-значение, столбцы или графы. Они не требуют строгой схемы таблиц.\n-   Модель данных: Нереляционные БД используют разные модели данных, такие как документоориентированная, ключ-значение, столбцовая или графовая модели.\n-   Язык запросов: В нереляционных БД используются специфичные языки запросов, которые зависят от выбранной модели данных или интерфейса.\n-   Гибкость: Нереляционные БД обеспечивают гибкость в добавлении, изменении и удалении данных, не требуя строгой схемы таблиц.\n-   Горизонтальное масштабирование: Нереляционные БД хорошо масштабируются горизонтально, позволяя добавлять новые узлы или серверы для обработки больших объемов данных.","id":"efd31113b9ee0eb7","x":729,"y":-1507,"width":909,"height":654},
		{"type":"text","text":"Load Balancer - распределение нагрузки.\nРаспределние запросов по нескольким серверам и обеспечение избыточности при отказе одной из нод.\nПо умолчанию в nginx используется модуль upstream. Он будет перенаправлять запросы по очереди на указаные в блоке upstream адреса серверов.","id":"6b77264248f9e49b","x":729,"y":-853,"width":420,"height":218},
		{"type":"text","text":"Репликация - размещение нескольких копий БД на нескольких серверах.\nОбеспечение доступности, способ расположить данные ближе к конечному пользователю, чтобы оптимизировать время ответа. ","id":"4cf6c24cabcc95f4","x":729,"y":-635,"width":420,"height":211},
		{"id":"217d325f36e9bc44","x":1638,"y":-744,"width":482,"height":1022,"type":"text","text":"1.  Материализованные представления (Materialized Views): Материализованные представления представляют собой копии данных из одной таблицы или нескольких таблиц в другой базе данных Oracle. Эти представления могут быть обновлены автоматически или по требованию с использованием процесса обновления. Материализованные представления облегчают доступ к данным, ускоряют выполнение запросов и позволяют создавать отчеты на основе скопированных данных.\n2.  Мастер-мастер репликация (Master-Master Replication): Метод мастер-мастер репликации позволяет нескольким базам данных Oracle обмениваться данными между собой. В этом случае каждая база данных является источником данных и получателем одновременно. Изменения данных могут происходить как на источнике, так и на получателе. Репликация данных осуществляется через процессы синхронизации, чтобы поддерживать целостность данных и предотвращать конфликты.\n3.  Мастер-слейв репликация (Master-Slave Replication): В методе мастер-слейв репликации одна база данных Oracle является мастером, откуда происходят изменения данных, а другая база данных является слейвом, куда данные реплицируются. Изменения, произведенные на мастере, автоматически передаются на слейв и применяются к его копии данных. Мастер-слейв репликация обеспечивает отказоустойчивость и улучшает доступность данных.\n4.  Snapshot репликация: В методе snapshot репликации создаются фиксированные копии данных на определенный момент времени. Эти снимки могут быть созданы по расписанию или по запросу. Снимки данных могут быть расположены на других серверах или в других базах данных Oracle для обеспечения доступа к данным на удаленных местоположениях."},
		{"type":"file","file":"Снимок экрана 2023-05-16 в 12.00.41.png","id":"08dbdbe2ee04a6a5","x":1130,"y":425,"width":520,"height":418},
		{"type":"file","file":"Снимок экрана 2023-05-16 в 12.00.26.png","id":"7dafa7cb79c7d859","x":640,"y":431,"width":490,"height":425}
	],
	"edges":[]
}